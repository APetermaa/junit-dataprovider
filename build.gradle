apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'findbugs'

group = 'com.tngtech.java'
version = '1.5.1-SNAPSHOT'

sourceCompatibility = 1.5

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'junit', name: 'junit-dep', version: '4.8.2' /* provided scope */
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.1'
    
    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.2.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

task jenkinsTest {
    // required due to jenkins fails if test output is not up to date :(
    // Solution found on http://www.practicalgradle.org/blog/2011/06/incremental-tests-with-jenkins/
    inputs.files test.outputs.files
    doLast{
        def timestamp = System.currentTimeMillis()
        test.testResultsDir.eachFile { it.lastModified = timestamp }
    }
}
 
build.dependsOn(jenkinsTest)

jar {
    manifest {
        attributes (
            'Built-By': "Gradle ${gradle.gradleVersion}",
            'Built-Date': new Date(),
            'Specification-Title': 'JUnit dataprovider',
            'Specification-Version': version,
            'Specification-Vendor': 'TNG Technology Consulting GmbH',
            'Implementation-Title': 'JUnit dataprovider',
            'Implementation-Version': version,
            'Implementation-Vendor': 'TNG Technology Consulting GmbH',
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

test {
    ignoreFailures = true
}

findbugs {
    toolVersion = "2.0.1"
    ignoreFailures = true
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// -- build and publish artifacts -------------------------------------------------------------------------------------

apply plugin: 'maven'
apply plugin: 'signing'


signing {
    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (!hasProperty('sonatypeUsername')) {
	ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
	ext.sonatypePassword = ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                // username and password from gradle.properties
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            pom {
                project {
                    name 'junit-dataprovider'
                    packaging 'jar'
                    description 'A TestNG like dataprovider runner for JUnit'
                    url 'https://github.com/TNG/junit-dataprovider'

                    scm {
                        url 'scm:git@github.com:TNG/junit-dataprovider.git'
                        connection 'scm:git@github.com:TNG/junit-dataprovider.git'
                        developerConnection 'scm:git@github.com:TNG/junit-dataprovider.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'lepokle'
                            name 'Leo von Klenze'
                        }
                        developer {
                            id 'aaschmid'
                            name 'Andreas Schmid'
                        }
                    }
                }
                whenConfigured { pom ->
                    pom.dependencies.find{ dep -> dep.groupId == 'junit' && dep.artifactId == 'junit-dep' }.scope = 'provided'
                }
            }
        }
    }
}
