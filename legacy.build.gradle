cpd {
    // Use Java 8 and later to execute cpd successfully
    toolVersion = "6.13.0"
}

cpdCheck {
    ignoreFailures = true
    minimumTokenCount = 25
    source = subprojects*.sourceSets*.main*.java*.srcDirs + subprojects*.sourceSets*.test*.java*.srcDirs // only check java source code
}

// -- coveralls gradle plugin multi-module project workaround ---------------------------------------------------------
def publishedProjects = subprojects.findAll()

task jacocoMerge(type: JacocoMerge) {
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
    publishedProjects.each { subproject ->
        executionData(subproject.tasks.withType(Test))
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = "Generates an aggregate report from all subprojects"
    dependsOn(publishedProjects.test, jacocoMerge)

    additionalSourceDirs.from(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from (files(publishedProjects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(publishedProjects.sourceSets.main.output))
    executionData(jacocoMerge.destinationFile)

    reports {
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

// -- sign and publish artifacts -------------------------------------------------------------------------------------

ext.isReleaseVersion = !project.version.endsWith("-SNAPSHOT")

// username and password from gradle.properties otherwise empty
if (!hasProperty("sonatypeUsername")) {
    ext.sonatypeUsername = ""
}
if (!hasProperty("sonatypePassword")) {
    ext.sonatypePassword = ""
}

subprojects {
    apply(plugin: "maven-publish")
    apply(plugin: "signing")

    tasks.withType(GenerateModuleMetadata) {
        enabled = isReleaseVersion // signing of these artifacts causes failure for snapshot versions
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from(components.java)
                pom {
                    name = project.archivesBaseName
                    packaging = "jar"
                    description = project.description
                    url = "https://github.com/TNG/junit-dataprovider"

                    developers {
                        developer {
                            id = "aaschmid"
                            name = "Andreas Schmid"
                            email = "service@aaschmid.de"
                        }
                    }

                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }

                    scm {
                        connection = "scm:git@github.com:TNG/junit-dataprovider.git"
                        developerConnection = "scm:git@github.com:TNG/junit-dataprovider.git"
                        url = "scm:git@github.com:TNG/junit-dataprovider.git"
                    }

                    withXml {
                        asNode().dependencies."*".each{ dep ->
                            // JUnit4
                            if (dep.groupId.text() == "junit" && dep.artifactId.text() == "junit") {
                                dep.version.first().setValue("[4.10,4.12]")
                                dep.scope.first().setValue("provided")
                            }

                            // JUnit5
                            if ((dep.groupId.text() == "org.junit.jupiter" && dep.artifactId.text() == "junit-jupiter-engine") ||
                                    (dep.groupId.text() == "org.junit.jupiter" && dep.artifactId.text() == "junit-jupiter-params")) {
                                dep.version.first().setValue("[5.5.0-M6,6.0.0)")
                                dep.scope.first().setValue("provided")
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = isReleaseVersion ? releasesRepoUrl : snapshotRepoUrl

                credentials  {
                    username = sonatypeUsername
                    password = sonatypePassword
                }

                metadataSources {
                    gradleMetadata()
                }
            }
        }
    }

    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    signing {
        required {
            isReleaseVersion && gradle.taskGraph.hasTask("publish")
        }
        sign(publishing.publications.mavenJava)
    }
}
