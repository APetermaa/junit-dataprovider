configure(subprojects.findAll{ p -> p.name.startsWith("junit-jupiter") }) {
    apply(plugin: "groovy")

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

    sourceSets {
        integTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    configurations {
        integTestImplementation {
            extendsFrom(testImplementation)
        }
    }

    dependencies {
        api(project(":core"))
        api("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        testImplementation("org.assertj:assertj-core:3.8.0")
        testImplementation("org.mockito:mockito-core:2.18.3")

        integTestImplementation("org.codehaus.groovy:groovy:2.4.12")
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += [ "-parameters" ]
    }

    test {
        useJUnitPlatform()
    }

    task integTest(dependsOn: integTestClasses, type: Test, group: "verification", description: "Runs all integration tests.") {
        ignoreFailures = isBuildOnJenkins

        classpath = sourceSets.integTest.runtimeClasspath
        testClassesDirs = sourceSets.integTest.output.classesDirs

        useJUnitPlatform()
    }
    task touchIntegTestResultsForJenkins(type: TouchTestResults) {
        tasks(integTest)
        enabled = isBuildOnJenkins
    }
    build.dependsOn(touchIntegTestResultsForJenkins)
}

project(":junit-jupiter") {
    archivesBaseName = "junit-jupiter-dataprovider"
    description = "A TestNG like dataprovider runner for JUnit Jupiter which is feature comparable to JUnit4 dataprovider."

    jar {
        manifest {
            attributes(
                "Automatic-Module-Name": "com.tngtech.junit.dataprovider.jupiter"
            )
        }
    }
}

project(":junit-jupiter-params") {
    archivesBaseName = "junit-jupiter-params-dataprovider"
    description = "A TestNG like dataprovider runner for JUnit Jupiter Parameterized Tests which is largely compatible to JUnit4 dataprovider."

    dependencies {
        api("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    }

    jar {
        manifest {
            attributes(
                "Automatic-Module-Name": "com.tngtech.junit.dataprovider.jupiter.params"
            )
        }
    }
}

// configure after properties are set and integration tests are added
subprojects {
    jar {
        manifest {
            def now = new Date()

            def company = "TNG Technology Consulting GmbH"
            def today = now.format("yyyy-MM-dd")
            def copyright = "${now[Calendar.YEAR]} ${company}"

            attributes(
                "Built-By": "Gradle ${gradle.gradleVersion}",
                "Built-Date": today, // using now would destroy incremental build feature
                "Specification-Title": archivesBaseName,
                "Specification-Version": archiveVersion,
                "Specification-Vendor": company,
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": archiveVersion,
                "Implementation-Vendor": company,
                "Issue-Tracker": "https://github.com/TNG/junit-dataprovider/issues",
                "Documentation-URL": "https://github.com/TNG/junit-dataprovider/wiki",
                "Copyright": copyright,
                "License": "Apache License v2.0, January 2004",

                // OSGi / p2 plugin information
                "Bundle-Copyright": copyright,
                "Bundle-Name": archivesBaseName,
                "Bundle-SymbolicName": "${project.group}.${archivesBaseName}",
                "Bundle-Vendor": company,
                "Export-Package": "com.tngtech.junit.dataprovider.*",
            )
        }
    }

    test {
        ignoreFailures = isBuildOnJenkins
    }

    task touchTestResultsForJenkins(type: TouchTestResults) {
        tasks(test)
        enabled = isBuildOnJenkins
    }
    build.dependsOn(touchTestResultsForJenkins)

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
        }
    }
    jacoco {
        toolVersion = "0.8.3"
    }

    spotbugs {
        toolVersion = "3.1.12"
        ignoreFailures = true
    }

    plugins.withType(LifecycleBasePlugin) {
        check.dependsOn(rootProject.cpdCheck)
    }

    // TODO comment for the sake of migration as this does not work anymore if file is imported from Kotlin DSL build file :-(
//    tasks.withType(com.github.spotbugs.SpotBugsTask).each { task ->
//        task.enabled = !rootProject.skipSpotBugs
//    }
}

cpd {
    // Use Java 8 and later to execute cpd successfully
    toolVersion = "6.13.0"
}

cpdCheck {
    ignoreFailures = true
    minimumTokenCount = 25
    source = subprojects*.sourceSets*.main*.java*.srcDirs + subprojects*.sourceSets*.test*.java*.srcDirs // only check java source code
}

// -- coveralls gradle plugin multi-module project workaround ---------------------------------------------------------
def publishedProjects = subprojects.findAll()

task jacocoMerge(type: JacocoMerge) {
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
    publishedProjects.each { subproject ->
        executionData(subproject.tasks.withType(Test))
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = "Generates an aggregate report from all subprojects"
    dependsOn(publishedProjects.test, jacocoMerge)

    additionalSourceDirs.from(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from (files(publishedProjects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(publishedProjects.sourceSets.main.output))
    executionData(jacocoMerge.destinationFile)

    reports {
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

// -- sign and publish artifacts -------------------------------------------------------------------------------------

ext.isReleaseVersion = !project.version.endsWith("-SNAPSHOT")

// username and password from gradle.properties otherwise empty
if (!hasProperty("sonatypeUsername")) {
    ext.sonatypeUsername = ""
}
if (!hasProperty("sonatypePassword")) {
    ext.sonatypePassword = ""
}

subprojects {
    apply(plugin: "maven-publish")
    apply(plugin: "signing")

    tasks.withType(GenerateModuleMetadata) {
        enabled = isReleaseVersion // signing of these artifacts causes failure for snapshot versions
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from(components.java)
                pom {
                    name = project.archivesBaseName
                    packaging = "jar"
                    description = project.description
                    url = "https://github.com/TNG/junit-dataprovider"

                    developers {
                        developer {
                            id = "aaschmid"
                            name = "Andreas Schmid"
                            email = "service@aaschmid.de"
                        }
                    }

                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }

                    scm {
                        connection = "scm:git@github.com:TNG/junit-dataprovider.git"
                        developerConnection = "scm:git@github.com:TNG/junit-dataprovider.git"
                        url = "scm:git@github.com:TNG/junit-dataprovider.git"
                    }

                    withXml {
                        asNode().dependencies."*".each{ dep ->
                            // JUnit4
                            if (dep.groupId.text() == "junit" && dep.artifactId.text() == "junit") {
                                dep.version.first().setValue("[4.10,4.12]")
                                dep.scope.first().setValue("provided")
                            }

                            // JUnit5
                            if ((dep.groupId.text() == "org.junit.jupiter" && dep.artifactId.text() == "junit-jupiter-engine") ||
                                    (dep.groupId.text() == "org.junit.jupiter" && dep.artifactId.text() == "junit-jupiter-params")) {
                                dep.version.first().setValue("[5.5.0-M6,6.0.0)")
                                dep.scope.first().setValue("provided")
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = isReleaseVersion ? releasesRepoUrl : snapshotRepoUrl

                credentials  {
                    username = sonatypeUsername
                    password = sonatypePassword
                }

                metadataSources {
                    gradleMetadata()
                }
            }
        }
    }

    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    signing {
        required {
            isReleaseVersion && gradle.taskGraph.hasTask("publish")
        }
        sign(publishing.publications.mavenJava)
    }
}

// -- Custom tasks ------------------------------------------------------------
/**
 * Task to touch all junit xml report files for all given {@link Test} {@code tasks}.
 * This is required due to Jenkins fails if test output is created before build starts which
 * could happen using Gradles up-to-date feature :(
 */
class TouchTestResults extends DefaultTask {
    @InputFiles
    def tasks = []

    def tasks(Test... testTasks) {
        tasks.addAll(testTasks)
        mustRunAfter(testTasks)
    }

    @TaskAction
    void touch() {
        tasks.each { test ->
            def testResultsDir = test.reports.junitXml.destination
            if (testResultsDir.exists()) {
                def timestamp = System.currentTimeMillis()
                testResultsDir.eachFile{ file -> file.lastModified = timestamp }
            }
        }
    }
}
